{"version":3,"sources":["components/Toggle.js","components/DarkModeToggle.js","components/Header.js","components/GamePiece.js","components/GameBoard.js","components/Score.js","components/Home.js","components/Settings.js","components/HighScores.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","checked","onChange","className","type","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","value","toggle","enable","Nav","styled","div","NavHeader","NavLeft","NavCenter","NavRight","Header","style","color","textDecoration","to","GamePiece","text","speed","removeWord","reduceLife","onAnimationEnd","animation","RandomColors","GameBoard","score","setScore","settings","useState","gameStarted","setGameStarted","input","setInput","activeWords","setActiveWords","allData","setAllData","timesRestarted","setTimesRestarted","lives","setLives","nextWordIndex","setNextWordIndex","name","setName","numberOfWords","amountOfWords","setAmountOfWords","baseGameSpeed","randomColors","restartGame","prev","previousScores","localStorage","getItem","JSON","parse","setItem","stringify","saveScore","word","filter","data","useEffect","a","axios","words","map","fetchItems","length","interval","setInterval","Math","random","key","String","round","clearInterval","all_pieces","lineOfNumberOfWords","Input","e","target","placeholder","Button","variant","points","currentInput","inputProps","disabled","Score","Home","Settings","setSpeed","setNumberOfWords","setRandomColors","min","max","preventDefault","alert","HighScores","scores","setScores","React","useMemo","columns","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","border","width","margin","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","fontWeight","textAlign","render","row","getRowProps","cells","cell","getCellProps","padding","App","undefined","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8275e33f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Toggle = ({ checked, onChange }) => (\r\n    <span className=\"toggle-control\">\r\n        <input\r\n            className=\"dmcheck\"\r\n            type=\"checkbox\"\r\n            checked={checked}\r\n            onChange={onChange}\r\n            id=\"dmcheck\"\r\n        />\r\n        <label htmlFor=\"dmcheck\" />\r\n    </span>\r\n);\r\n\r\nexport default Toggle;\r\n","import React from 'react';\r\n\r\nimport Toggle from './Toggle';\r\nimport useDarkMode from 'use-dark-mode';\r\n\r\nconst DarkModeToggle = () => {\r\n    const darkMode = useDarkMode(true);\r\n\r\n    return (\r\n        <div className=\"dark-mode-toggle\">\r\n            <button type=\"button\" onClick={darkMode.disable}>\r\n                ☀\r\n      </button>\r\n            <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\r\n            <button type=\"button\" onClick={darkMode.enable}>\r\n                ☾\r\n      </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DarkModeToggle;\r\n","// Header.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport DarkModeToggle from './DarkModeToggle';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Nav = styled.div`\r\n  background-color: #fff;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\r\n`;\r\n\r\nconst NavHeader = styled.div`\r\n  max-width: 1010px;\r\n  padding: 26px 20px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NavLeft = styled.div`\r\n  width: 33.333%;\r\n  text-align: left;\r\n`;\r\n\r\nconst NavCenter = styled.div`\r\n  width: 33.333%;\r\n  text-align: center;\r\n`;\r\n\r\n\r\nconst NavRight = styled.div`\r\n  width: 33.333%;\r\n  text-align: right;\r\n \r\n  svg {\r\n    margin-right: 20px;\r\n  }\r\n`;\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <Nav className=\"Header\">\r\n      <NavHeader>\r\n        <NavLeft>Speed Typing Game</NavLeft>\r\n        <NavCenter>\r\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji*/}\r\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji*/}<Link style={{ color: \"red\", textDecoration: \"none\" }} to=\"/\">🏠</Link>\r\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji*/}<Link style={{ color: \"red\", textDecoration: \"none\" }} to=\"/settings\">⚙️</Link>\r\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji*/}<Link style={{ color: \"red\", textDecoration: \"none\" }} to=\"/high_scores\">🏆</Link>\r\n\r\n        </NavCenter>\r\n\r\n        <NavRight>\r\n          <DarkModeToggle />\r\n        </NavRight>\r\n      </NavHeader>\r\n    </Nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport \"./GamePiece.css\"\r\n\r\nfunction GamePiece({ text, speed, removeWord, reduceLife, color }) {\r\n    const handleAnimationEnd = () => {\r\n        reduceLife();\r\n        removeWord();\r\n    };\r\n    return (\r\n        <div onAnimationEnd={handleAnimationEnd} style={{ animation: `left_to_right ${speed}s linear forwards` }}>\r\n            <p style={{ color: color }} className=\"game-piece\">{text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePiece\r\n","import React, { useState, useEffect } from 'react'\r\nimport './GameBoard.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport { Input } from '@material-ui/core';\r\nimport GamePiece from './GamePiece';\r\nimport axios from 'axios';\r\n\r\nconst startLife = 3;\r\nconst speedModifier = 5;\r\n\r\nconst RandomColors = [\"red\", \"green\", \"yellow\", \"blue\", \"black\", \"white\"];\r\n\r\nfunction GameBoard({ score, setScore, settings }) {\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [input, setInput] = useState('');\r\n    const [activeWords, setActiveWords] = useState([]);\r\n    const [allData, setAllData] = useState([]);\r\n    const [timesRestarted, setTimesRestarted] = useState(0);\r\n    const [lives, setLives] = useState(startLife);\r\n    const [nextWordIndex, setNextWordIndex] = useState(0);\r\n    const [name, setName] = useState('player');\r\n\r\n    const [amountOfWords, setAmountOfWords] = settings.numberOfWords;\r\n    const baseGameSpeed = settings.speed[0];\r\n    const randomColors = settings.randomColors[0];\r\n\r\n    if (amountOfWords === \"\")\r\n        setAmountOfWords(10000);\r\n\r\n    const saveScore = (name, score) => {\r\n        let previousScores = localStorage.getItem('scores');\r\n        previousScores = previousScores ? JSON.parse(previousScores) : [];\r\n        localStorage.setItem('scores', JSON.stringify([...previousScores, { name, score }]));\r\n    }\r\n\r\n    const restartGame = () => {\r\n        setGameStarted(false);\r\n        setActiveWords([]);\r\n        setInput('');\r\n        setTimesRestarted(prev => prev + 1);\r\n        saveScore(name, score);\r\n    }\r\n\r\n    const reduceLife = () => {\r\n        setLives(prev => prev - 1);\r\n        if (lives === 1) {\r\n            restartGame();\r\n        }\r\n    };\r\n\r\n    const removeWord = (word) => {\r\n        setActiveWords(prev => prev.filter(data => data.text !== word));\r\n    };\r\n\r\n    const addToScore = (points) => {\r\n        setScore((prev) => prev + points);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            const words = await axios(\r\n                `https://random-word-api.herokuapp.com//word?number=${amountOfWords}&swear=0`\r\n            );\r\n            if(!words)\r\n                return;\r\n            setAllData(words.data.map(word => { return { text: word } }));\r\n        }\r\n        fetchItems();\r\n    }, [timesRestarted, amountOfWords]);\r\n\r\n    useEffect(() => {\r\n        if (!gameStarted || nextWordIndex >= allData.length)\r\n            return;\r\n        const chooseRandomColor = () => {\r\n            if (randomColors === false)\r\n                return \"white\";\r\n            else\r\n                return String(RandomColors[Math.round(Math.random() * RandomColors.length)]);\r\n        }\r\n        const addWord = () => {\r\n            setActiveWords((prev) => [...prev, { ...allData[nextWordIndex], speed: baseGameSpeed + Math.random() * speedModifier, key: nextWordIndex, color:  chooseRandomColor()}]);\r\n            setNextWordIndex(prev => prev + 1);\r\n        }\r\n        const interval = setInterval(() => {\r\n            if (nextWordIndex < allData.length)\r\n                addWord();\r\n            else\r\n                clearInterval(interval);\r\n        }, 3000);\r\n        return () => clearInterval(interval);\r\n    }, [gameStarted, allData, nextWordIndex, baseGameSpeed, randomColors]);\r\n\r\n\r\n    const all_pieces = activeWords.map((data) =>\r\n        <GamePiece {...data} removeWord={() => removeWord(data.text)} reduceLife={reduceLife} />\r\n    )\r\n    const checkWord = (e) => {\r\n        const currentInput = e.target.value;\r\n        // TODO: consider using dictionary instead of array for more efficient search\r\n        if (activeWords.filter(data => data.text === currentInput).length > 0) {\r\n            addToScore(10);\r\n            setInput('');\r\n            // Destroy word - user already wrote it\r\n            removeWord(currentInput);\r\n        }\r\n        else\r\n            setInput(currentInput);\r\n    }\r\n    const handleClick = () => {\r\n        if (!gameStarted) {\r\n            setGameStarted(true);\r\n            setScore(0);\r\n            setNextWordIndex(0);\r\n            setLives(startLife);\r\n        }\r\n        else {\r\n            restartGame();\r\n        }\r\n    }\r\n    const renderNameInput = () => {\r\n        return (\r\n            <>\r\n                <Input className=\"username_input\" value={name} onChange={(e => setName(e.target.value))} placeholder=\"Enter your name\" />\r\n                <br />\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (amountOfWords === 10000)\r\n        var lineOfNumberOfWords = nextWordIndex\r\n    else\r\n        lineOfNumberOfWords = nextWordIndex + \"/\" + amountOfWords\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <p>Number of Words: {lineOfNumberOfWords}</p>\r\n                <p>Number of Lives: {lives}</p>\r\n                <p style={{ color: \"red\" }}>{!gameStarted && timesRestarted > 0 ? 'Game Over' : null}</p>\r\n            </div>\r\n            <div className=\"gameBoard\">\r\n                {all_pieces}\r\n            </div>\r\n            <div className=\"buttonsRow\">\r\n                {!gameStarted ? renderNameInput() : null}\r\n                <Button className=\"start_game_btn\" variant=\"contained\" color=\"primary\" onClick={handleClick}>\r\n                    {!gameStarted ? 'Start Game' : 'Restart Game'}\r\n                </Button >\r\n\r\n                <br />\r\n                <Input value={input} onChange={checkWord} className=\"game_txt\" placeholder=\"Write Here and Press Enter\" inputProps={{ 'aria-label': 'description' }} disabled={!gameStarted} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameBoard","import React from 'react';\r\n\r\nexport default function Score({score}) {\r\n    return (\r\n    <h2>Your score is {score}</h2>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport GameBoard from './GameBoard';\r\nimport Score from './Score';\r\n\r\nfunction Home({ settings }) {\r\n    const [score, setScore] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Welcome to Speed Typing Game!</h1>\r\n            <Score score={score} />\r\n            <GameBoard score={score} settings={settings} setScore={setScore} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nfunction Settings({ settings }) {\r\n    const [speed, setSpeed] = settings.speed;\r\n    const [numberOfWords, setNumberOfWords] = settings.numberOfWords;\r\n    const [randomColors, setRandomColors] = settings.randomColors;\r\n\r\n    const Submit = (e) => {\r\n        e.preventDefault();\r\n        localStorage.setItem('speed', speed);\r\n        localStorage.setItem('numberOfWords', numberOfWords);\r\n        localStorage.setItem('randomColors', randomColors);\r\n        alert(\"New Settings Saved!\");\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Settings</h1>\r\n            <form >\r\n                <label>Speed (between 1 and 10):</label>\r\n                <input onChange={e => setSpeed(e.target.value)} type=\"number\" id=\"speed\" name=\"speed\" min=\"1\" max=\"10\" value={speed} />\r\n                <br></br>\r\n                <label>Amount Of Words (Empty is infinite):</label>\r\n                <input onChange={e => setNumberOfWords(e.target.value)} type=\"number\" id=\"amount_of_words\" name=\"amount_of_words\" min=\"1\" value={numberOfWords} />\r\n                <br></br>\r\n                <label>Random Colors</label>\r\n                <input onChange={() => setRandomColors(prev => !prev)} type=\"checkbox\" id=\"random_colors\" name=\"random_colors\" checked={randomColors} />\r\n                <br></br>\r\n                <input type=\"submit\" onClick={Submit} />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"./HighScores.css\"\r\nimport { useTable } from 'react-table'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction HighScores() {\r\n    const [scores, setScores] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('scores')) {\r\n            setScores(JSON.parse(localStorage.getItem('scores')));\r\n        }\r\n\r\n    }, [])\r\n\r\n    /* Old renderScores function\r\n    const renderScores = () => {\r\n        return scores.map(score => { return <td>{score.name}: {score.score}</td> });\r\n    }\r\n\r\n    */\r\n\r\n    const data = React.useMemo(\r\n        () => scores,\r\n        [scores]\r\n    )\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name', // accessor is the \"key\" in the data\r\n            },\r\n            {\r\n                Header: 'Score',\r\n                accessor: 'score',\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({ columns, data })\r\n\r\n    const clearScores = () => {\r\n        setScores([]);\r\n        localStorage.setItem('scores', \"[]\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>High Scores</h1>\r\n            <Button variant=\"contained\" color={\"secondary\"} onClick={clearScores}>Clear Scores</Button>\r\n            <br></br><br></br>\r\n            <table {...getTableProps()} style={{ border: 'solid 1px blue', width: '50%', margin: 'auto' }}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th\r\n                                    {...column.getHeaderProps()}\r\n                                    style={{\r\n                                        borderBottom: 'solid 3px red',\r\n                                        background: 'aliceblue',\r\n                                        color: 'black',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map(row => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <td\r\n                                            {...cell.getCellProps()}\r\n                                            style={{\r\n                                                padding: '10px',\r\n                                                border: 'solid 1px gray',\r\n                                                background: 'blue',\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {cell.render('Cell')}\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HighScores\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\nimport './styles.scss';\r\nimport Settings from './components/Settings';\r\nimport { Route, HashRouter as Router } from \"react-router-dom\";\r\nimport HighScores from './components/HighScores';\r\n\r\nfunction App() {\r\n  const settings = {\r\n    speed: useState(1),\r\n    numberOfWords: useState(20),\r\n    randomColors: useState(false)\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"speed\") !== undefined && localStorage.getItem(\"speed\") !== null) {\r\n        settings.speed[1](localStorage.getItem(\"speed\"));\r\n    }\r\n    if (localStorage.getItem(\"numberOfWords\") !== undefined && localStorage.getItem(\"numberOfWords\") !== null) {\r\n        settings.numberOfWords[1](localStorage.getItem(\"numberOfWords\"));\r\n    }\r\n    if (localStorage.getItem(\"randomColors\") !== undefined && localStorage.getItem(\"randomColors\") !== null) {\r\n        settings.randomColors[1](localStorage.getItem(\"randomColors\") === 'true');\r\n    }\r\n}, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Route exact path=\"/\" render={() => <Home settings={settings} />} />\r\n        <Route path=\"/settings\" render={() => <Settings settings={settings} />} />\r\n        <Route path=\"/high_scores\" component={HighScores} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}